---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NavBar from '../components/NavBar.astro';
import { serviceOperations } from '../lib/supabase';

// Obtener todos los servicios desde la base de datos
const { data: services, error } = await serviceOperations.getAllServices();

if (error) {
  console.error('Error fetching services:', error);
}
---

<Layout title="TeCambio - Marketplace">
  <Header showPostButton={true} />
  <NavBar />

  <div class="container mx-auto px-4 py-8">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-4">Marketplace de Servicios</h1>
      <p class="text-gray-600 text-lg">Descubre y compra servicios √∫nicos de nuestra comunidad</p>
    </div>

    <!-- Filtros -->
    <div class="flex flex-wrap gap-4 mb-8 justify-center">
      <button class="filter-btn bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors" data-filter="all">
        Todos
      </button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="paid">
        Pagos
      </button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="barter">
        Intercambios
      </button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="physical">
        F√≠sicos
      </button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="online">
        Online
      </button>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" id="services-grid">
      {services && services.map((service) => (
        <div class="service-card bg-white border-2 border-black rounded-xl shadow-lg overflow-hidden transition-transform hover:scale-105" 
              data-payment-type={service.payment_type}
              data-is-physical={service.is_physical}
              data-is-online={service.is_online}>
          <div class="aspect-video bg-gradient-to-br from-blue-100 to-purple-100 flex items-center justify-center">
            <div class="text-center">
              <div class="w-16 h-16 bg-blue-500 rounded-full flex items-center justify-center mx-auto mb-2">
                <span class="text-white text-2xl font-bold">{service.title.charAt(0)}</span>
              </div>
              <p class="text-gray-600 text-sm">Vista previa</p>
            </div>
          </div>
          
          <div class="p-4">
            <div class="flex items-start justify-between mb-2">
              <h3 class="text-lg font-bold text-gray-800 flex-1">{service.title}</h3>
              <div class="flex gap-1 ml-2">
                {service.is_physical && (
                  <span class="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full">F√≠sico</span>
                )}
                {service.is_online && (
                  <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full">Online</span>
                )}
              </div>
            </div>
            
            <p class="text-gray-600 mb-4 text-sm line-clamp-3">{service.description}</p>
            
            <div class="flex items-center justify-between mb-4">
              {service.payment_type === "paid" ? (
                <div class="flex items-center gap-2">
                  <span class="text-2xl font-bold text-green-600">‚Ç¨{service.price}</span>
                  <span class="text-sm text-gray-500">{service.currency}</span>
                </div>
              ) : (
                <span class="text-lg font-bold text-blue-600">Intercambio</span>
              )}
              
              <span class={`px-3 py-1 rounded-full text-xs font-medium ${
                service.payment_type === "paid" 
                  ? "bg-green-100 text-green-800" 
                  : "bg-blue-100 text-blue-800"
              }`}>
                {service.payment_type === "paid" ? "Pago" : "Intercambio"}
              </span>
            </div>
            
            {service.payment_type === "paid" ? (
              <div class="space-y-2">
                <div class="flex items-center gap-2 text-sm text-gray-600 mb-2">
                  <span>M√©todo preferido:</span>
                  {service.preferred_payment_method === "stripe" ? (
                    <span class="bg-purple-100 text-purple-800 px-2 py-1 rounded text-xs">Stripe</span>
                  ) : (
                    <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded text-xs">PayPal</span>
                  )}
                </div>
                
                <button 
                  class="w-full bg-gradient-to-r from-blue-500 to-purple-600 text-white py-2 px-4 rounded-lg hover:from-blue-600 hover:to-purple-700 transition-all duration-300 buy-button font-semibold"
                  data-service-id={service.id}
                  data-title={service.title}
                  data-description={service.description}
                  data-price={service.price}
                  data-provider={service.preferred_payment_method}
                >
                    Comprar Ahora
                </button>
              </div>
            ) : (
              <button 
                class="w-full bg-gradient-to-r from-gray-500 to-gray-600 text-white py-2 px-4 rounded-lg hover:from-gray-600 hover:to-gray-700 transition-all duration-300 font-semibold"
              >
                ü§ù Contactar para Intercambio
              </button>
            )}
            
            <div class="text-xs text-gray-500 mt-2 pt-2 border-t">
              Publicado: {new Date(service.created_at).toLocaleDateString()}
            </div>
          </div>
        </div>
      ))}
    </div>
    
    {(!services || services.length === 0) && (
      <div class="text-center py-16">
        <div class="mb-4">
          <div class="w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-4xl text-gray-400">üì¶</span>
          </div>
          <h3 class="text-xl font-bold text-gray-600 mb-2">No hay servicios disponibles</h3>
          <p class="text-gray-500 mb-6">S√© el primero en publicar un servicio en nuestro marketplace</p>
        </div>
        <a href="/add-service" class="inline-block bg-blue-500 text-white py-3 px-8 rounded-lg hover:bg-blue-600 transition-colors font-semibold">
          üöÄ Publica el primer servicio
        </a>
      </div>
    )}
  </div>

  <Footer />
</Layout>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Funcionalidad de filtros
  const filterButtons = document.querySelectorAll('.filter-btn');
  const serviceCards = document.querySelectorAll('.service-card');
  
  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.dataset.filter;
      
      // Actualizar estilos de botones
      filterButtons.forEach(btn => {
        btn.classList.remove('bg-blue-500', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
      });
      button.classList.remove('bg-gray-200', 'text-gray-700');
      button.classList.add('bg-blue-500', 'text-white');
      
      // Filtrar servicios
      serviceCards.forEach(card => {
        const paymentType = card.dataset.paymentType;
        const isPhysical = card.dataset.isPhysical === 'true';
        const isOnline = card.dataset.isOnline === 'true';
        
        let shouldShow = false;
        
        switch(filter) {
          case 'all':
            shouldShow = true;
            break;
          case 'paid':
            shouldShow = paymentType === 'paid';
            break;
          case 'barter':
            shouldShow = paymentType === 'barter';
            break;
          case 'physical':
            shouldShow = isPhysical;
            break;
          case 'online':
            shouldShow = isOnline;
            break;
        }
        
        if (shouldShow) {
          card.style.display = 'block';
          card.style.animation = 'fadeIn 0.3s ease-in';
        } else {
          card.style.display = 'none';
        }
      });
    });
  });
  
  // Manejar compra de servicios
  document.querySelectorAll('.buy-button').forEach(button => {
    button.addEventListener('click', async (e) => {
      const serviceId = e.target.dataset.serviceId;
      const title = e.target.dataset.title;
      const description = e.target.dataset.description;
      const price = parseFloat(e.target.dataset.price);
      const provider = e.target.dataset.provider;
      
      // Deshabilitar bot√≥n durante el procesamiento
      e.target.disabled = true;
      e.target.innerHTML = '‚è≥ Procesando...';
      
      try {
        if (provider === 'stripe') {
          await processStripePayment(title, description, price);
        } else if (provider === 'paypal') {
          await processPayPalPayment(title, description, price);
        }
      } catch (error) {
        console.error('Error procesando el pago:', error);
        alert('Error al procesar el pago. Int√©ntalo de nuevo.');
        e.target.disabled = false;
        e.target.innerHTML = 'üí≥ Comprar Ahora';
      }
    });
  });
  
  async function processStripePayment(title, description, price) {
    const response = await fetch('/api/payments/stripe', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        amount: price,
        title: title,
        description: description,
        currency: 'eur'
      })
    });
    
    const data = await response.json();
    
    if (data.sessionId) {
      window.location.href = `https://checkout.stripe.com/pay/${data.sessionId}`;
    } else {
      throw new Error(data.error || 'Error al crear sesi√≥n de pago');
    }
  }
  
  async function processPayPalPayment(title, description, price) {
    const response = await fetch('/api/payments/paypal', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        amount: price,
        title: title,
        description: description,
        currency: 'EUR'
      })
    });
    
    const data = await response.json();
    
    if (data.approvalUrl) {
      window.location.href = data.approvalUrl;
    } else {
      throw new Error(data.error || 'Error al crear orden de PayPal');
    }
  }
  
  // Animaci√≥n de fade in
  const style = document.createElement('style');
  style.textContent = `
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
  `;
  document.head.appendChild(style);
</script>
