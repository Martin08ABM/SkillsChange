---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NavBar from '../components/NavBar.astro';
import { getDb } from '../lib/db';

let services = [];
let error = null;

const currencySymbols = {
  EUR: 'â‚¬',
  USD: '$',
  GBP: 'Â£',
};

const PLACEHOLDER_IMAGE = '/logo.webp';

try {
  const db = await getDb();
  services = await db.all('SELECT * FROM services ORDER BY created_at DESC');
} catch (e) {
  console.error('Error fetching services:', e);
  error = e;
}
---

<Layout title="TeCambio - Inicio">
  <Header showPostButton={true} />
  <NavBar />

  <div class="container mx-auto px-4 py-8">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-4">Marketplace de Servicios</h1>
      <p class="text-gray-600 text-lg">Descubre y compra servicios Ãºnicos de nuestra comunidad</p>
    </div>

    <!-- Filtros -->
    <div class="flex flex-wrap gap-4 mb-8 justify-center">
      <button class="filter-btn bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors" data-filter="all">Todos</button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="paid">Pagos</button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="barter">Intercambios</button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="physical">FÃ­sicos</button>
      <button class="filter-btn bg-gray-200 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-300 transition-colors" data-filter="online">Online</button>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8" id="services-grid">
      {services && services.map((service) => (
        <a href={`/service/${service.id}`} 
           class="service-card group flex flex-col bg-white border-2 border-black rounded-xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl hover:-translate-y-1" 
           data-payment-type={service.payment_type}
           data-is-physical={service.is_physical}
           data-is-online={service.is_online}>
          
          <!-- Contenedor de la imagen con aspect ratio fijo -->
          <div class=" max-w-1/2 overflow-hidden">
            <img src={service.image_url || PLACEHOLDER_IMAGE} alt={`Imagen de ${service.title}`} class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"/>
          </div>

          <!-- Contenedor del contenido -->
          <div class="p-4 flex flex-col flex-grow">
            <h3 class="text-lg font-bold text-gray-800">{service.title}</h3>
            <p class="text-sm text-gray-600 my-2 line-clamp-2 flex-grow">{service.description}</p>

            <!-- Contenido inferior (precio, fecha) -->
            <div class="mt-auto">
              <div class="flex items-center justify-between pt-2">
                {service.payment_type === "paid" ? (
                  <div class="flex items-baseline gap-1">
                    <span class="text-2xl font-bold text-green-600">{currencySymbols[service.currency] || ''}{service.price}</span>
                    <span class="text-sm text-gray-500">{service.currency}</span>
                  </div>
                ) : (
                  <span class="text-lg font-bold text-blue-600">Intercambio</span>
                )}
                <div class="flex gap-1 ml-2">
                  {service.is_physical ? <span class="px-2 py-1 bg-orange-100 text-orange-800 text-xs rounded-full font-medium">FÃ­sico</span> : null}
                  {service.is_online ? <span class="px-2 py-1 bg-green-100 text-green-800 text-xs rounded-full font-medium">Online</span> : null}
                </div>
              </div>
              <div class="text-xs text-gray-500 mt-2 pt-2 border-t">
                Publicado: {new Date(service.created_at).toLocaleDateString()}
              </div>
            </div>
          </div>
        </a>
      ))}
    </div>
    
    {(!services || services.length === 0) && (
      <div class="text-center py-16">
        <div class="mb-4">
          <div class="w-24 h-24 bg-gray-200 rounded-full flex items-center justify-center mx-auto mb-4">
            <span class="text-4xl text-gray-400">ðŸ“¦</span>
          </div>
          <h3 class="text-xl font-bold text-gray-600 mb-2">No hay servicios disponibles</h3>
          <p class="text-gray-500 mb-6">SÃ© el primero en publicar un servicio en nuestro marketplace</p>
        </div>
        <a href="/add-service" class="inline-block bg-blue-500 text-white py-3 px-8 rounded-lg hover:bg-blue-600 transition-colors font-semibold">
          ðŸš€ Publica el primer servicio
        </a>
      </div>
    )}
  </div>

  <Footer />
</Layout>

<style>
  .service-card {
    display: flex;
    flex-direction: column;
  }
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>

<script>
  // Funcionalidad de filtros
  const filterButtons = document.querySelectorAll('.filter-btn');
  const serviceCards = document.querySelectorAll('.service-card');
  
  filterButtons.forEach(button => {
    button.addEventListener('click', (e) => {
      e.preventDefault(); // Prevenir la navegaciÃ³n del enlace padre
      e.stopPropagation(); // Detener la propagaciÃ³n del evento al enlace

      const filter = button.dataset.filter;
      
      filterButtons.forEach(btn => {
        btn.classList.remove('bg-blue-500', 'text-white');
        btn.classList.add('bg-gray-200', 'text-gray-700');
      });
      button.classList.remove('bg-gray-200', 'text-gray-700');
      button.classList.add('bg-blue-500', 'text-white');
      
      serviceCards.forEach(card => {
        const paymentType = card.dataset.paymentType;
        const isPhysical = card.dataset.isPhysical === '1';
        const isOnline = card.dataset.isOnline === '1';
        
        let shouldShow = false;
        
        switch(filter) {
          case 'all': shouldShow = true; break;
          case 'paid': shouldShow = paymentType === 'paid'; break;
          case 'barter': shouldShow = paymentType === 'barter'; break;
          case 'physical': shouldShow = isPhysical; break;
          case 'online': shouldShow = isOnline; break;
        }
        
        card.style.display = shouldShow ? 'flex' : 'none';
      });
    });
  });
</script>