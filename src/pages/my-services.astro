
---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import NavBar from '../components/NavBar.astro';
import { getDb } from '../lib/db';

const { userId, redirectToSignIn } = Astro.locals.auth();
if (!userId) {
  return redirectToSignIn();
}

let userServices = [];
let error = null;

const currencySymbols = {
  EUR: '€',
  USD: '$',
  GBP: '£',
};

try {
  const db = await getDb();
  userServices = await db.all('SELECT * FROM services WHERE user_id = ? ORDER BY created_at DESC', userId);
} catch (e) {
  console.error('Error fetching user services:', e);
  error = e;
}
---

<Layout title="Mis Anuncios">
  <Header />
  <NavBar />

  <div class="container mx-auto px-4 py-8">
    <div class="text-center mb-8">
      <h1 class="text-4xl font-bold mb-4">Mis Anuncios</h1>
      <p class="text-gray-600 text-lg">Gestiona los servicios que has publicado.</p>
    </div>

    {error && <p class="text-red-500 text-center">Error al cargar tus anuncios.</p>}

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {userServices.length > 0 ? userServices.map((service) => (
        <div class="service-card bg-white border-2 border-black rounded-xl shadow-lg overflow-hidden flex flex-col" data-service-id={service.id}>
          <div class="p-4 flex flex-col h-full">
            <h3 class="text-lg font-bold text-gray-800 flex-1">{service.title}</h3>
            <p class="text-gray-600 my-2 text-sm line-clamp-3 flex-grow">{service.description}</p>
            
            {service.payment_type === "paid" && (
              <div class="flex items-center gap-2 my-2">
                <span class="text-xl font-bold text-green-600">{currencySymbols[service.currency] || ''}{service.price}</span>
                <span class="text-sm text-gray-500">{service.currency}</span>
              </div>
            )}

            <div class="mt-auto pt-4 border-t-2">
              <p class="text-sm text-gray-500 mb-4">Estado: <span class="font-bold text-green-600">Activo</span></p>
              <div class="flex gap-2">
                <a href={`/edit-service/${service.id}`} class="flex-1 text-center bg-blue-500 text-white py-2 px-4 rounded-lg hover:bg-blue-600 transition-colors font-semibold">Editar</a>
                <button class="flex-1 bg-red-500 text-white py-2 px-4 rounded-lg hover:bg-red-600 transition-colors font-semibold delete-button">Eliminar</button>
              </div>
            </div>
          </div>
        </div>
      )) : (
        <div class="col-span-full text-center py-16">
          <p class="text-gray-500 mb-6">Aún no has publicado ningún servicio.</p>
          <a href="/add-service" class="inline-block bg-blue-500 text-white py-3 px-8 rounded-lg hover:bg-blue-600 transition-colors font-semibold">
            Publicar mi primer anuncio
          </a>
        </div>
      )}
    </div>
  </div>

  <Footer />
</Layout>

<script>
  document.querySelectorAll('.delete-button').forEach(button => {
    button.addEventListener('click', async (e) => {
      const card = e.target.closest('.service-card');
      const serviceId = card.dataset.serviceId;
      
      if (!confirm('¿Estás seguro de que quieres eliminar este anuncio? Esta acción no se puede deshacer.')) {
        return;
      }

      e.target.disabled = true;
      e.target.textContent = 'Eliminando...';

      try {
        const response = await fetch(`/api/services/${serviceId}`, {
          method: 'DELETE',
        });

        if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error || 'No se pudo eliminar el anuncio.');
        }

        // Eliminar la tarjeta del anuncio de la vista
        card.style.transition = 'opacity 0.5s';
        card.style.opacity = '0';
        setTimeout(() => card.remove(), 500);

      } catch (error) {
        alert(`Error: ${error.message}`);
        e.target.disabled = false;
        e.target.textContent = 'Eliminar';
      }
    });
  });
</script>
